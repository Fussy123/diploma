// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum Role {
  ADMIN
  EMPLOYER
  WORKER
}

model User {
  id           String       @id @default(cuid())
  email        String       @unique
  name         String?
  phone        String?
  role         Role         @default(WORKER)
  password     String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  vacancies    Vacancy[]
  resumes      Resume[]
  applications Application[]
  favorites    Favorite[]
  companies    Company[]
}

model Company {
  id          String     @id @default(cuid())
  name        String
  description String?
  website     String?
  location    String?
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  vacancies   Vacancy[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([userId])
}

model Vacancy {
  id           String       @id @default(cuid())
  title        String
  description  String
  salary       Int?
  location     String?
  requirements String?
  companyId    String
  company      Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications Application[]
  favorites    Favorite[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([companyId])
  @@index([userId])
}

model Resume {
  id           String       @id @default(cuid())
  title        String
  description  String
  experience   String?
  education    String?
  skills       String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications Application[]
}

model Application {
  id        String   @id @default(cuid())
  status    String   @default("PENDING")
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  vacancyId String
  vacancy   Vacancy  @relation(fields: [vacancyId], references: [id], onDelete: Cascade)
  resumeId  String
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  vacancyId String
  vacancy   Vacancy  @relation(fields: [vacancyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, vacancyId])
  @@index([userId])
  @@index([vacancyId])
}
